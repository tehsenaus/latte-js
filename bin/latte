#!/usr/bin/env node

var compiler = require("../lib/compiler"),
	fs = require("fs"),
	path = require('path'),
	mkdirp = require('mkdirp'),
	glob = require("glob"),
	util = require("util");

var optimist = require('optimist')
	.usage('Latte.js compiler.\nUsage: latte [options] [--] files...')
    .boolean(['c', 'v', 'd', 'version'])
    .alias('c', 'compile')
    .alias('o', 'output')
    .alias('v', 'verbose')
    .describe('c', 'Compile input files. If not specified, evaluates the files.')
    .describe('o', 'Output directory, to be used with --compile.')
    .describe('version', 'Show version')
, argv = optimist.argv;

if ( argv.version ) {
	console.log(require("../package.json").version);
	process.exit(0);
}

var files = argv._,
	inDir = process.cwd();

if ( argv.help ) {
	optimist.showHelp();
	process.exit(-1);
}

var compilerOptions = {
	outputDir: argv.o
};

if ( !files.length ) {
	return require('../lib/repl')();
}


// Whole directory?
if ( files[0][files[0].length-1] == '/' ) {

	var compiledFiles = compiler.compileDir(files[0], argv.o, compilerOptions);
	compiledFiles.on('error', function (e) {
		console.error(e);
		process.exit(-1);
	})
	return compiledFiles.pipe(process.stdout);

} else if ( argv.c ) {

	compiler.compileFiles(files, compilerOptions)

} else {



}




if ( argv.c ) {

	
	mkdirp.sync(out);

	compiled.forEach(function (file) { 
		var dst = file.path.replace('.latte', '.js');

		fs.writeFileSync(path.join(out, dst), file.output, 'utf8')
	})

} else {
	// Run the source
	require.main._compile(compiled[0].output)

}
