
var should = require("should");
var Q = require("q");

describe('Monad Expression', function () {

	function async(x) {
		var d = Q.defer();
		setTimeout(() => d.resolve(x), 10);
		return d.promise;
	}

	it('flattens async control flow', function (done) {
		function async(x) {
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 10);
			return d.promise;
		}
		do {
			var x =<< async('Meee');
			x.should.equal('Meee');
			done();
		}
	})

	it('allows multiple binds', function (done) {
		(do {
			var x =<< async('Meee');
			x.should.equal('Meee');
			var y =<< async('You');
			y.should.equal('You');
			done();
		}).done();
	})

	it('allows chain of binds in a single variable declaration', function (done) {
		(do {
			var x =<< async('Hellooo'),
				y =<< async(x);
			y.should.equal('Hellooo');
			done();
		}).done();
	})

	it('works with conditionals', function (done) {
		do {
			var x = true ? <<async('Meee') : 'You';
			x.should.equal('Meee');
			done();
		}
	})

	it('doesn\'t evaluate false conditional', function (done) {
		var asyncCalled = false;
		function async(x) {
			asyncCalled = true;
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 100);
			return d.promise;
		}

		do {
			var x = false ? <<async('Meee') : 'You';
			x.should.equal('You');
			asyncCalled.should.equal(false);
			done();
		}
	})


	it('works with logical expression', function (done) {
		do {
			var x = true && <<async('Meee');
			x.should.equal('Meee');
			done();
		}
	})

	it('supports short circuit evaluation', function (done) {
		var asyncCalled = false;
		function async(x) {
			asyncCalled = true;
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 100);
			return d.promise;
		}

		do {
			var x = 'You' || <<async('Meee');
			x.should.equal('You');
			asyncCalled.should.equal(false);
			done();
		}
	})



	it('works with if statement', function (done) {
		do {
			var x;
			if ( true ) {
				x = << async('Meee')
			} else {
				x = 'You';
			}

			x.should.equal('Meee');
			done();
		}
	})



	it('works with for-in statement', function (done) {
		do {
			var x = "";
			
			for ( var i in {a:1, b:1} ) {
				x += << async(i);
			}

			x.should.equal('ab');
			done();
		}
	})

	it('works with continue statement in for-in', function (done) {
		do {
			var x = "";

			for ( var i in {a:1, b:1, c:1} ) {
				var v =<< async(i);
				if ( v == 'b' ) continue;
				x += v;
			}

			x.should.equal('ac');
			done();
		}
	})

	it('works with break statement in for-in', function (done) {
		do {
			var x = "";

			for ( var i in {a:1, b:1, c:1} ) {
				var v =<< async(i);
				if ( v == 'c' ) break;
				x += v;
			}

			x.should.equal('ab');
			done();
		}
	})


	it('works with for-of statement', function (done) {
		do {
			var r = "";
			for (var x of ['a','b','c']) {
				r += << async(x);
			}

			r.should.equal('abc');
			done();
		}
	})


	it('works with continue statement in for-of', function (done) {
		do {
			var r = "";
			for (var x of ['a','b','c']) {
				var v =<< async(x);
				if ( v == 'b' ) continue;
				r += v;
			}

			r.should.equal('ac');
			done();
		}
	})

	it('works with break statement in for-of', function (done) {
		do {
			var r = "";
			for (var x of ['a','b','c']) {
				var v =<< async(x);
				if ( v == 'c' ) break;
				r += v;
			}

			r.should.equal('ab');
			done();
		}
	})



	it('preserves lexical this', function (done) {
		(function () {
			do {
				(<< async(this.m)).should.equal('hello');
				done();
			}
		}).call({ m: 'hello' })
	})

	it('allows inner functions', function (done) {
		do {
			(<< async(['hello'])).map(x => x).join('').should.equal('hello');
			done();
		}
	})

	it('allows inner functions as part of bound expression', function (done) {
		do {
			var called = false;
			<< (async('hello').then(m => {
				m.should.equal('hello');
				called = true;
			}));

			called.should.equal(true);
			done();
		}
	})
})
