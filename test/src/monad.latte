
var should = require("should");
var Q = require("q");

describe('Monad Expression', function () {

	function async(x) {
		var d = Q.defer();
		setTimeout(() => d.resolve(x), 100);
		return d.promise;
	}

	it('flattens async control flow', function (done) {
		function async(x) {
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 100);
			return d.promise;
		}
		do {
			var x =<< async('Meee');
			x.should.equal('Meee');
			done();
		}
	})

	it('works with conditionals', function (done) {
		do {
			var x = true ? <<async('Meee') : 'You';
			x.should.equal('Meee');
			done();
		}
	})

	it('doesn\'t evaluate false conditional', function (done) {
		var asyncCalled = false;
		function async(x) {
			asyncCalled = true;
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 100);
			return d.promise;
		}

		do {
			var x = false ? <<async('Meee') : 'You';
			x.should.equal('You');
			asyncCalled.should.equal(false);
			done();
		}
	})


	it('works with logical expression', function (done) {
		do {
			var x = true && <<async('Meee');
			x.should.equal('Meee');
			done();
		}
	})

	it('supports short circuit evaluation', function (done) {
		var asyncCalled = false;
		function async(x) {
			asyncCalled = true;
			var d = Q.defer();
			setTimeout(() => d.resolve(x), 100);
			return d.promise;
		}

		do {
			var x = 'You' || <<async('Meee');
			x.should.equal('You');
			asyncCalled.should.equal(false);
			done();
		}
	})

})
