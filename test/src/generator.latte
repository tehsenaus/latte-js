
var should = require("should");
var Q = require("q");

describe('Generators', function () {
	//"use strict";

	it('can yield values', function () {
		function *g() {
			yield 42;
		}
		g().next().value.should.equal(42);
	})

	it('can accept values on yield', function () {
		function *g() {
			(yield 42).should.equal("hello");
			yield "bye";
		}
		var i = g();
		i.next().value.should.equal(42);
		i.send("hello").value.should.equal("bye");
	})

	it('works with conditionals', function () {
		function *g() {
			var x = true ? yield 'Meee' : 'You';
			x.should.equal('Meee');
			yield "bye";
		}
		var i = g();
		var v = i.next().value;
		v.should.equal('Meee');
		i.send(v).value.should.equal("bye");
	})

	it('doesn\'t evaluate false conditional', function () {
		var yielded = false;
		function *g() {
			var x = false ? yield 'Meee' : 'You';
			x.should.equal('You');
			yielded.should.equal(false);
			yield "bye";
		}
		var i = g();
		var v = i.next().value;
		yielded = true;
	})


	it('works with logical expression', function () {
		function *g()  {
			var x = true && (yield 'Meee');
			x.should.equal('Meee');
			yield "bye";
		}
		var i = g();
		var v = i.next().value;
		v.should.equal('Meee');
		i.send(v).value.should.equal("bye");
	})

	it('supports short circuit evaluation', function () {
		var yielded = false;
		function *g()  {
			var x = 'You' || (yield 'Meee');
			x.should.equal('You');
			yielded.should.equal(false);
			yield "bye";
		}
		var i = g();
		var v = i.next().value;
		yielded = true;
		v.should.equal('bye');
	})



	it('works with if statement', function () {
		function *g()  {
			var x;
			if ( false ) {
				x = yield 'Not me';
			}

			if ( true ) {
				x = yield 'Meee';
			} else {
				x = 'You';
			}

			x.should.equal('Meee');
			yield "bye";
		}

		var i = g();
		var v = i.next().value;
		v.should.equal('Meee');
		i.send(v).value.should.equal("bye");
	})

	it('works with if statement condition', function () {
		function *g()  {
			if ( yield true ) {
				yield 'good';
			} else {
				yield 'bad';
			}
		}

		var i = g();
		var v = i.next().value;
		v.should.equal(true);
		i.send(v).value.should.equal("good");
	})

	it('works with nested if statement', function () {
		function *g()  {
			var x;
			if ( true ) {
				var y = yield 'Meee';
				if ( false ) {
					x = yield 'Arrgh';
				} else {
					y.should.equal('Meee');
					x = yield 'Me again';
				}

				y.should.equal('Meee');
			} else {
				x = 'You';
			}

			x.should.equal('Me again');
			yield "bye";
		}

		var i = g();
		var v = i.next().value;
		v.should.equal('Meee');
		v = i.send(v).value;
		v.should.equal("Me again");
		i.send(v).value.should.equal("bye");
	})


	it('works with while statement', function () {
		function *g()  {
			var i = 0;
			while(i < 100000) {
				if ( i % 2 == 0 ) 
					yield i;
				i++;
			}
			console.log('done');
		}

		var i = g();
		i.next().value.should.equal(0);
		i.next().value.should.equal(2);
		i.next().value.should.equal(4);
	})

	it('works with while statement condition', function () {
		function *g()  {
			var i = 0;
			while((yield i++) < 10) {
				
			}
			yield 'done';
		}

		var i = g();
		i.next().value.should.equal(0);
		i.send(5).value.should.equal(1);
		i.next().value.should.equal('done');
	})

	it('works with nested while statement', function () {
		function *g()  {
			var i = 0;
			while(i < 100000) {
				var j = 1;
				while(j <= 2) {
					yield (i * j++);
				}
				i++;
			}
			console.log('done');
		}

		var i = g();
		i.next().value.should.equal(0);
		i.next().value.should.equal(0);
		i.next().value.should.equal(1);
		i.next().value.should.equal(2);
		i.next().value.should.equal(2);
		i.next().value.should.equal(4);
	})


	// it('works with for-in statement', function (done) {
	// 	do {
	// 		var x = "";
			
	// 		for ( var i in {a:1, b:1} ) {
	// 			x += << async(i);
	// 		}

	// 		x.should.equal('ab');
	// 		done();
	// 	}
	// })


	it('works with for-of statement', function () {
		function *g() {
			for (var x of ['a','b','c']) {
				yield x;
			}
		}

		var i = g();
		i.next().value.should.equal('a');
		i.next().value.should.equal('b');
		i.next().value.should.equal('c');
	})
	
	it('works with nested for-of statement', function () {
		function *g() {
			for (var x of ['a','b']) {
				for (var y of ['x','y']) {
					yield x+y;
				}
			}
		}

		var i = g();
		i.next().value.should.equal('ax');
		i.next().value.should.equal('ay');
		i.next().value.should.equal('bx');
		i.next().value.should.equal('by');
	})

	it('works with empty nested for-of statement', function () {
		function *g() {
			for (var x of []) {
				for (var y of ['x','y']) {
					yield x+y;
				}
			}
		}

		var i = g();
		i.next().done.should.exist;
	})
})
