
var should = require("should");

describe('Array Comprehension', function () {

	it('enumerates an array', function () {
		var a = [10, 20];
		[a[i] for (i in a)].should.eql(a);
	})

	it('enumerates two arrays', function () {
		var a = [10, 20],
			b = [1,2];
		[a[i] + b[j] for (i in a) for (j in b)].should.eql([ 11, 12, 21, 22 ]);
	})

	it('filters an array', function () {
		var a = [1, 2, 3, 4, 5, 6];
		var evens = [a[i] for (i in a) if (a[i] % 2 == 0)]
		evens.should.eql([2, 4, 6]);
	})

	it('allows local variables', function () {
		var a = {x: 'a', y: 'b'};
		
		[k + '=' + v for (k in a) with v = a[k]].join(' ')
			.should.equal('x=a y=b');
	})

	it('allows local variables as first statement', function () {
		var a = {x: 'a', y: 'b'};
		
		[pre + k with pre = 'Hello ' for (k in a)].join(', ')
			.should.equal('Hello x, Hello y');
	})

	it('enumerates an array with of', function () {
		var a = [10, 20];
		[x for (x of a)].should.eql(a);
	})

	it('enumerates two arrays with of', function () {
		var a = [10, 20],
			b = [1,2];
		[i + j for (i of a) for (j of b)].should.eql([ 11, 12, 21, 22 ]);
	})

	it('uses local variable binding scope', function (done) {
		var a = [10, 20],
			r = 0;
		[process.nextTick(() => r += x) for (x of a)];

		process.nextTick(() => {
			r.should.equal(30);
			done();
		});
	})
})
