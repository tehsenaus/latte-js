{
  "name": "ast-util",
  "version": "0.1.2",
  "description": "Utilities for AST transformers.",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/square/ast-util.git"
  },
  "keywords": [
    "ast",
    "transform",
    "esnext",
    "es6",
    "macros"
  ],
  "author": {
    "name": "Square, Inc."
  },
  "license": "Apache 2",
  "bugs": {
    "url": "https://github.com/square/ast-util/issues"
  },
  "homepage": "https://github.com/square/ast-util",
  "devDependencies": {
    "mocha": "^1.18.2",
    "recast": "^0.5.16",
    "esprima": "git://github.com/ariya/esprima.git#harmony"
  },
  "dependencies": {
    "ast-types": "^0.3.26",
    "private": "^0.1.3"
  },
  "readme": "# ast-util\n\nUtilities for AST transformers.\n\n## Install\n\n```\n$ npm install [--save] ast-util\n```\n\n## API\n\n<a name=\"callArraySlice\" href=\"#wiki-callArraySlice\">#</a> <b>callArraySlice</b>(<i>scope</i>, <i>node</i>[, <i>begin</i>, <i>end</i>])\n\nReturns a call to `Array.prototype.slice` with `node` as the context and\n`begin` and `end` as the arguments to `slice`.\n\n\n<a name=\"callFunctionBind\" href=\"#wiki-callFunctionBind\">#</a> <b>callFunctionBind</b>(<i>scope</i>, <i>fn</i>, <i>context</i>[, <i>args</i>])\n\nReturns a call to `Function.prototype.bind` using either `call` or `apply`\ndepending on what the value of `args` is. If `args` is an expression then\n`apply` is used. If `args` is an array of expressions, then `call`.\n\n\n<a name=\"callGet\" href=\"#wiki-callGet\">#</a> <b>callGet</b>(<i>scope</i>, <i>object</i>, <i>property</i>, <i>receiver</i>)\n\nThe [[Get]] internal method on objects would look something like this\nimplemented in pure JavaScript:\n\n```js\nfunction get(object, property, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === void 0) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return void 0;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if ('value' in desc && 'writable' in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === void 0) {\n      return void 0;\n    }\n    return getter.call(receiver);\n  }\n}\n```\n\n\n<a name=\"callGetOwnPropertyDescriptor\" href=\"#wiki-callGetOwnPropertyDescriptor\">#</a> <b>callGetOwnPropertyDescriptor</b>(<i>scope</i>, <i>object</i>, <i>property</i>)\n\nReturns a call to `Object.getOwnPropertyDescriptor` with the given `object` and\n`property`.\n\n\n<a name=\"callGetPrototypeOf\" href=\"#wiki-callGetPrototypeOf\">#</a> <b>callGetPrototypeOf</b>(<i>scope</i>, <i>object</i>)\n\nReturns a call to `Object.getPrototypeOf` with the given `object`.\n\n\n<a name=\"callHasOwnProperty\" href=\"#wiki-callHasOwnProperty\">#</a> <b>callHasOwnProperty</b>(<i>scope</i>, <i>node</i>, <i>property</i>)\n\nReturns a call to `hasOwnProperty` with `node` as the context and `property` as\nthe property to check.\n\n\n<a name=\"callSharedMethod\" href=\"#wiki-callSharedMethod\">#</a> <b>callSharedMethod</b>(<i>scope</i>, <i>callee</i>, <i>args</i>)\n\nReturns a call to the given `callee` with `args` as the arguments. If `callee`\nis a string then it is treated as a globally-accessible function such as\n`Object.defineProperty` which will be stored in a unique temporary variable.\nSubsequent calls to this function will re-use the same temporary variable.\n\n\n<a name=\"callSharedMethodWithContext\" href=\"#wiki-callSharedMethodWithContext\">#</a> <b>callSharedMethodWithContext</b>(<i>scope</i>, <i>callee</i>, <i>context</i>, <i>args</i>)\n\nReturns a call to the given `callee` with `context` as the method context and\n`args` as the arguments. If `callee` is a string then it is treated as a\nglobally-accessible function such as `Array.prototype.slice` which will be\nstored in a unique temporary variable. Subsequent calls to this function will\nre-use the same temporary variable.\n\n\n<a name=\"getGlobals\" href=\"#wiki-getGlobals\">#</a> <b>getGlobals</b>(<i>ast</i>)\n\nGets a list of identifiers referencing global variables anywhere within the\ngiven `ast`. Assuming the ast is for this code:\n\n```js\nvar a;\nfunction b(){ return c; }\nb(d);\n```\n\nThen `getGlobals` will return two identifiers, `c` and `a`.\n\n\n<a name=\"identifierForString\" href=\"#wiki-identifierForString\">#</a> <b>identifierForString</b>(<i>string</i>)\n\nGenerate a safe JavaScript identifier for the given string.\n\n\n<a name=\"injectShared\" href=\"#wiki-injectShared\">#</a> <b>injectShared</b>(<i>scope</i>, <i>name</i>, <i>expression</i>)\n\nInjects a shared variable with a unique identifier. Only the first call with\nthe same `scope` and `name` will result in a variable declaration being\ncreated. The `expression` passed in can either be an AST node or a function to\ngenerate one. This function is generally used to inject repeatedly-used values\nand prevent repeated execution.\n\n\n<a name=\"injectVariable\" href=\"#wiki-injectVariable\">#</a> <b>injectVariable</b>(<i>scope</i>, <i>identifier</i>[, <i>init</i>])\n\nInjects a variable with the given `identifier` into the given `scope` as a\n`var` declaration with an optional initial value.\n\n\n<a name=\"isReference\" href=\"#wiki-isReference\">#</a> <b>isReference</b>(<i>path</i>)\n\nDetermines whether the given `path` is a value reference. For example, `a` and\n`b` are references, but `c` is not:\n\n```js\na(b.c);\n```\n\nOnly identifiers count as references.\n\n\n<a name=\"isUsed\" href=\"#wiki-isUsed\">#</a> <b>isUsed</b>(<i>scope</i>, <i>name</i>)\n\nDetermines whether the given `name` should be considered \"used\" in the given\n`scope`. For a name to be used, it should either:\n\n  1. Be declared in this scope or a parent scope.\n  2. Be referenced in this scope, a parent scope, or any child scopes.\n\nFor example, `a`, `b`, and `d` are used in the global scope of this example\nwhile `c` is not:\n\n```js\nvar a;\nfunction b() {}\n\ntry {\n  a = b(d);\n} catch (c) {\n}\n```\n\n\n<a name=\"sharedFor\" href=\"#wiki-sharedFor\">#</a> <b>sharedFor</b>(<i>scope</i>, <i>name</i>)\n\nInjects a shared variable by getting the named value from a dotted path. For\nexample, this will return an identifier that can be used in place of the named\nexpression:\n\n```js\nsharedFor(scope, 'Object.defineProperty')\n```\n\nSubsequent calls to `sharedFor` in the same scope will return the same\nidentifier.\n\n\n<a name=\"uniqueIdentifier\" href=\"#wiki-uniqueIdentifier\">#</a> <b>uniqueIdentifier</b>(<i>scope</i>[, <i>name</i>])\n\nGenerates an identifier guaranteed not to collide with any others in the given\n`scope`. This function will also never generate the same identifier twice for\nany `scope` whose global scope already got that identifier.\n\nCalled in a scope with no global references and no variables, the first time\nthis function is called it will return an identifier named `$__0`.\n\nWhen called with a name that name will be used with a prefix, \"$\\_\\_\", if\npossible. If that name is already used then it will append incrementing numbers\nuntil it finds a name that isn't used.\n\n\n## Usage\n\nThese methods are useful to source transforms, such as transpilers or macros.\nSuch transforms often have to insert variables into scopes and replace\nexpressions. Using `injectVariable` and `injectShared` are specifically for\nthat purpose. In conjunction with `ast-types`, here's how you'd write a simple\nversion of a `swap` macro:\n\n```js\n// var tmp;\nvar tmp = util.injectVariable(\n  this.scope,\n  util.uniqueIdentifier(this.scope)\n);\n\nthis.replace(\n  b.sequenceExpression([\n    // tmp = left\n    b.assignmentExpression(\n      '=',\n      tmp,\n      left\n    ),\n    // left = right\n    b.assignmentExpression(\n      '=',\n      left,\n      right\n    ),\n    // right = tmp\n    b.assignmentExpression(\n      '=',\n      right,\n      tmp\n    )\n  ])\n);\n```\n\nSee [examples/swap-macro.js](examples/swap-macro.js) for a more complete\nexample.\n\n## Contributing\n\n[![Build Status](https://travis-ci.org/square/ast-util.png?branch=master)](https://travis-ci.org/square/ast-util)\n\n\n### Setup\n\nFirst, install the development dependencies:\n\n```\n$ npm install\n```\n\nThen, try running the tests:\n\n```\n$ npm test\n```\n\n\n### Pull Requests\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\nAny contributors to the master ast-util repository must sign the [Individual\nContributor License Agreement (CLA)][cla].  It's a short form that covers our\nbases and makes sure you're eligible to contribute.\n\n[cla]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1\n\nWhen you have a change you'd like to see in the master repository, [send a pull\nrequest](https://github.com/square/ast-utils/pulls). Before we merge your\nrequest, we'll make sure you're in the list of people who have signed a CLA.\n\n\n## Acknowledgements\n\nHuge thanks to [Ben Newman][benjamn] for [ast-types][ast-types], on which much\nof this library depends.\n\n[benjamn]: https://github.com/benjamn\n[ast-types]: https://github.com/benjamn/ast-types\n",
  "readmeFilename": "README.md",
  "_id": "ast-util@0.1.2",
  "_from": "ast-util@^0.1.0"
}
