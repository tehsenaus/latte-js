
module.exports = {

	arrow: function (params, body) {
		return {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": params.map(p => this.ident(p)),
            "defaults": [],
            "body": body,
            "rest": null,
            "generator": false,
            "expression": body.type != 'BlockStatement'
        }
	},

	closure: function (stmts, params) {
		params = params || [];
		return {
            "type": "CallExpression",
            "callee": this.fn(stmts, params),
            "arguments": params.map(p => this.ident(p))
        }
	},
	keys: function (x) {
		return this.call(
			this.member('Object', 'keys'), [x]
		)
	},
	forEach: function (arr, stmts, itemId) {
		return {
            "type": "ExpressionStatement",
            "expression": this.call(
            	this.member(arr, 'forEach'),
            	[ this.fn(stmts, [itemId]) ]
            )
        }
	},
	forEachKey: function (x, stmts, itemId) {
		return this.forEach(this.keys(x), stmts, itemId);
	},

	block: function (stmts) {
		return stmts instanceof Array ? {
			type: "BlockStatement",
			body: stmts
		} : (stmts.type == 'BlockStatement' ? stmts : this.block([stmts]))
	},

	varDecl: function (id, init, options) {
		return {
            "type": "VariableDeclaration",
            "declarations": [ this.decl(id, init) ],
		    "kind": (options && options.kind) || 'var'
	    }
	},
	decl: function (id, init) {
		return {
	        "type": "VariableDeclarator",
	        "id": this.ident(id),
	        "init": init
	    }
	},


	fn: function (stmts, params) {
		return {
            "type": "FunctionExpression",
            "id": null,
            "params": params.map(p => this.ident(p)),
            "defaults": [],
            "body": this.block(stmts),
            "rest": null,
            "generator": false,
            "expression": false
        }
	},
	call: function (callee, args) {
		return {
            "type": "CallExpression",
            "callee": this.ident(callee),
            "arguments": args.map(a => this.ident(a))
        }
	},
	ret: function (arg) {
		return {
    		type: "ReturnStatement",
    		argument: this.ident(arg)
    	}
	},

	assign: function (left, right, op) {
		return  {
            "type": "AssignmentExpression",
            "operator": op || "=",
            "left": this.ident(left),
            "right": this.ident(right)
        }
	},
	assignStmt: function () {
		return this.exprStmt(this.assign.apply(this, arguments));
	},

	conditional: function (test, cons, alt) {
		return {
			type: 'ConditionalExpression',
			test: test,
			consequent: cons,
			alternate: alt
		}
	},

	exprStmt: function (e) {
		return e.type == 'ExpressionStatement' ? e : {
			type: 'ExpressionStatement',
			expression: e
		}
	},

	member: function (obj, property, options) {
		return {
            "type": "MemberExpression",
            "computed": options && options.computed,
            "object": typeof obj == "object" ? obj : this.ident(obj),
            "property": typeof property == "object" ? property : (
            	options && options.computed ? this.val(property) : this.ident(property)
            )
        }
	},

	ident: function (id) {
		return typeof id === 'string' ? {
            "type": "Identifier",
            "name": id
        } : id;
	},

	lit: function (raw, value) {
		return {
            "type": "Literal",
            "value": value === undefined ? eval(raw) : value,
            "raw": raw
        }
	},
	val: function (value) {
		return this.lit(JSON.stringify(value), value);
	}
}
