
var esprima = require("../lib/esprima-latte"),
	escodegen = require("escodegen"),
	transform = require("../lib/transform"),
	es = require('event-stream'),
	fs = require('fs'),
	path = require('path'),
	glob = require("glob"),
	util = require('util');

function compiler(options) {
	options = options || {};
	var interactive = options.interactive,
		encoding = options.encoding || 'utf8';

	var buf = [], ending = false;
	function compileBuffered() {
		var output = compile(buf.join(""), options);
		buf = [];
		return output;
	}
	var stream = es.map(function (data, callback) {
		if (data == compiler.EOF) {
			// reset
			buf = [];
			return callback();
		}

		buf.push(data);

		if ( interactive || ending ) {
			try {
				callback(null, compileBuffered());
			} catch (e) {
				// Wait for more data
				if ( !interactive && options.debug ) {
					console.error(e.stack);
				}
				callback(interactive ? null : e);
			}
		} else {
			callback();
		}
	})

	var _end = stream.end;
	stream.end = function (data) {
		ending = true;
		stream.write(data || '');
		_end.call(this)
	}

	return stream;
}
module.exports = compiler;
compiler.EOF = '\u0003';

compiler.files = function (options) {
	var inputDir = path.join(process.cwd(), options.inputDir),
		outputDir = path.join(process.cwd(), options.outputDir);

	var stream;
	return es.pipeline(
		es.split(),
		stream = es.map(function (file, cb) {
			if (!file) return cb();

			var filePath = path.join(inputDir, file),
				output = file.replace('.latte', '.js')

			stream.emit('data', output);

			var compiler = compileFile(filePath, options);

			compiler.on('end', function () {
				cb(null);
			});
			compiler.on('error', function (e) {
				cb(file + ': ' + e);
			});

			compiler.pipe(fs.createWriteStream(
				path.join(outputDir, output)
			));
		}),
		es.join('\n')
	)
}


function compile(source, options) {
	var ast = esprima.parse(source);

	if ( options.debug ) {
		fs.writeFileSync('ast.debug.js', util.inspect(ast, null, null));
	}

	ast = transform(ast);

	if ( options.debug ) {
		fs.writeFileSync('ast.debug.transformed.js', util.inspect(ast, null, null));
	}

	return escodegen.generate(ast);
}
compiler.compile = compile;


function compileFile(file, options) {
	return fs.createReadStream(file).pipe(
		compiler(options)
	)
}
compiler.compileFile = compileFile;

function compileFiles(files, options) {
	var fileCompiler = compiler.files(options);

	files.forEach(file => {
		fileCompiler.write(file + '\n');
	})
	fileCompiler.end();

	return fileCompiler;
}
compiler.compileFiles = compileFiles;

function compileDir(inputDir, outputDir, options) {
	options.inputDir = inputDir;
	options.outputDir = outputDir;

	var fileCompiler = compiler.files(options);

	glob(inputDir + '**/*.latte', function (err, files) {
		files.forEach(file => {
			var name = file.slice(inputDir.length);
			fileCompiler.write(name + '\n');
		})
		fileCompiler.end();
	});

	return fileCompiler;
}
compiler.compileDir = compileDir;

if ( require.main == module ) {
	require("./repl")();
}
