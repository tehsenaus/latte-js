
var traverser = require("../traverser"),
	gen = require("../gen");

var generatorTransformer = module.exports = traverser.explicit('generator', {
	_yield: function (expr, context) {
		var oldIsInYield = context.isInYield;
		context.isInYield = true

		var bound = context.generator.yield(this.expr(expr, context));

		context.isInYield = oldIsInYield;
		return bound;
	},

	traverse: function (ast) {
		ast = this.super.traverse(ast);
		if ( ast.hasGenerators ) {
			ast['requires generator prelude'] = true;
		}
		return ast;
	},

	ifStmt: function (stmt, context) {
		var aHasYields = stmtHasYields(stmt.consequent)
			bHasYields = stmt.alternate && stmtHasYields(stmt.alternate);

		if ( aHasYields || bHasYields || exprHasYields(stmt.test) ) {

			stmt.test = this.expr(stmt.test, context);

			// There are yields in our branches. Save the current
			// continuation, and call it with the result of the
			// branch we take.

			context.generator.withcc((cc) => {

				return gen.ifStmt(
					stmt.test, [
						this.stmt(stmt.consequent, context),
						cc( gen.ident('null') )
					], [
						stmt.alternate ? this.stmt(stmt.alternate, context) : gen.empty,
						cc( gen.ident('null') )
					]
				);

			}, 'if');

			return gen.empty;
		}

		// Doesn't contain yields, but may contain other generators
		var oldGenerator = context.generator;
		context.generator = null;
		
		stmt = this.super.ifStmt(stmt, context);
		
		context.generator = oldGenerator;

		return stmt;
	},

	forInOfStmt: function (stmt, context) {

		if ( !stmt.generatoric && stmtHasYields(stmt.body) ) {
			throw new Error('Yields not supported in for statement... yet!');
		}

		// Doesn't contain yields, but may contain other generators
		var oldGenerator = context.generator;
		context.generator = null;
		
		stmt = this.super.forInOfStmt(stmt, context);
		
		context.generator = oldGenerator;

		return stmt;
	},

	forStmt: function (stmt, context) {
		if ( stmtHasYields(stmt.body)
			|| stmtHasYields(stmt.update)
			|| stmtHasYields(stmt.test)
		) {

			// Convert to a while statement, and process that

			stmt = gen.block([
				stmt.init,
				gen.whileStmt(stmt.test, gen.block([
					stmt.body,
					gen.exprStmt(stmt.update)
				]))
			])
			
			return this.stmt(stmt, context);
		}

		// Doesn't contain yields, but may contain other generators
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.forStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},

	whileDoWhileStmt: function (stmt, context) {
		if ( context.generator && (
			stmtHasYields(stmt.body)
			|| exprHasYields(stmt.test)
		) ) {

			// Convert do-while to while
			if ( stmt.type == 'DoWhileStatement' ) {
				stmt.type = 'WhileStatement';
				stmt = gen.block(
					gen.block(stmt.body).body.concat([ stmt ])
				)
				return this.stmt(stmt, context);
			}


			// Body contains yields. Convert to a recursive
			// closure. Continuation is called if the test
			// evaluates to false.
			
			var rec = context.temp('loop');

			context.generator.withcc(callcc => {

				this.stmt( gen.ifStmt(
					stmt.test,
					gen.block(stmt.body).body.concat([
						gen.ret( gen.call(rec) )
					])
				), context );

				return gen.block([
					gen.ret( gen.callWithThis(rec) ),
					gen.fndecl([
						callcc(gen.ident(null))
					], [], rec)
				]);
			}, 'loop')

			return gen.empty;
		}

		// Doesn't contain yields, but may contain other generators
		var oldMonad = context.monad;
		context.generator = null;
		
		stmt = this.super.whileDoWhileStmt(stmt, context);
		
		context.generator = oldMonad;

		return stmt;
	},

	switchStmt: function (stmt, context) {
		if ( stmtHasYields(stmt) ) {
			throw new Error('Yields not supported in switch statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.switchStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},
	tryStmt: function (stmt, context) {
		if ( stmtHasYields(stmt) ) {
			throw new Error('Yields not supported in try statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.tryStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},

	func: function (stmt, context) {
		// Inner functions have new context
		var oldGenerator = context.generator;
		context.generator = null;

		stmt = this.super.func(stmt, context);
		
		context.generator = oldGenerator;
			
		return stmt;
	},

	yieldExpr: function (expr, context) {
		if (!context.generator) {
			throw new Error('Unexpected yield: not in generator!');
		}

		return this._yield(expr.argument, context);
	},

	binary: function (expr, context) {
		// Support short circuit evaluation
		if ( !context.isInYield && expr.type === 'LogicalExpression') {
			var bHasYields = exprHasYields(expr.right);

			if ( bHasYields ) {
				
				var test = gen.ident(context.temp());
				this.stmt( gen.varDecl(test, expr.left), context );

				return context.generator.withcc((cc) => {

					return gen.ifStmt(
						expr.operator == '||' ? gen.not(test) : test, [
							cc( this.expr(expr.right, context) )
						], [
							cc( test )
						]
					);

				});

			}
		}

		return this.super.binary(expr, context);
	},

	conditional: function (expr, context) {
		if ( !context.isInYield ) {
			var aHasYields = exprHasYields(expr.consequent)
				bHasYields = exprHasYields(expr.alternate);

			if ( aHasYields || bHasYields ) {

				// There are yields in our branches. Save the current
				// continuation, and call it with the result of the
				// branch we take.

				return context.generator.withcc((cc) => {

					return gen.ifStmt(
						expr.test, [
							cc( this.expr(expr.consequent, context) )
						], [
							cc( this.expr(expr.alternate, context) )
						]
					);

				});

				
			}
		}

		return this.super.conditional(expr, context);
	},

	stmt: function (stmt, context) {

		if ( stmt.type == 'ExpressionStatement' ) {

			// OPTIMISATION:
			// Yield statement - not using value, so avoid adding
			// useless expressionstmt
			if ( stmt.expression.type == 'YieldExpression' ) {
				this.super.stmt(stmt, context);
				return gen.empty;
			}
		}

		stmt = this.super.stmt(stmt, context);

		if ( context.generator ) {
			if ( stmt.type != 'BlockStatement' ) {
				context.generator.stmt(stmt);
				stmt = gen.empty;
			}
		}

		return stmt;
	},



	withGenerator: function (m, context, fn) {
		var lastGenerator = context.generator;

		var currBlock = generatorBlock(context);

		var generator = context.generator = {

			// signals that any stements or expressions following this node needs to be
			// extracted as a named continuation (i.e. if there are branches
			// which need to merge).
			//
			// The value of the current expression - ccv - (if applicable)
			// is passed to the continuation.
			withcc: (fn, name, opts) => {
				opts = opts || {};

				var cc = opts.cc || context.temp('cc' + (name ? '_'+name : '')),
					ccv = context.temp('cv' + (name ? '_'+name : ''));

				var prevBlock = currBlock;
				currBlock = generatorBlock(context);

				stmt = fn((v) => {
					// End of a branch, call CC with value
					var callCC = currBlock.renderWithContinuation(cc, v);

					// Start a new block, with the same exit point (branch merge)
					currBlock = generatorBlock(context);

					return callCC;
				});

				if ( !currBlock.isEmpty() ) {
					throw "Continuation hasn't been called!";
				}

				currBlock = prevBlock;
				currBlock.stmt(stmt);

				// After a flow branch, any future statements must be part of the
				// named continuation.
				// Start entering all following statements into the continuation
				currBlock.beginNamedContinuation(cc, ccv);

				// stmt.leadingComments = [gen.comment('@' + depth + ' withcc: '+cc)]
		
				return gen.ident(ccv);
			},

			yield: v => currBlock.yield(v),
			stmt: stmt => currBlock.stmt(stmt)
		}

		// Traverse
		m = fn();

		context.generator = lastGenerator;
		context.ast.hasGenerators = true;
		
		return gen.block( currBlock.renderWithContinuation('__stop') );
	},

	generator: function (m, context) {

		var body = this.withGenerator(m, context, () => {
			// Traverse to get all yields
			return this.super.generator(m, context);
		})

		m.body.body = [ gen.ret(
			gen.call('__gen', [ gen.fn([
				body.type.indexOf('Expression') > 0 ? gen.ret(body) : body
			], ['__yield','__stop']) ]) 
		)];

		m.generator = false;
		return m;
	}
})




// Generator Block:
// A block with internal control flow, supported by
// named continuations.
function generatorBlock (context) {
	var currBasicBlock = basicBlock(context),
		renderedBlocks = [],
		renderSite = renderedBlocks;

	return {
		beginNamedContinuation: function (cname, valueName) {
			// Terminate the current basic block, pointing to the
			// next continuation

			var cDeclSite = gen.block([]);
			currBasicBlock.stmt(cDeclSite);

			renderSite.push( currBasicBlock.renderWithContinuation(cname) );
			renderSite = cDeclSite.body;

			currBasicBlock = namedContinuation(context, cname, valueName);
			return currBasicBlock;
		},

		renderWithContinuation: function (cname, value) {
			renderSite[0] = currBasicBlock.renderWithContinuation(cname, value);
			return gen.block( renderedBlocks );
		},

		stmt: s => currBasicBlock.stmt(s),
		yield: v => currBasicBlock.yield(v),
		isEmpty: () => renderedBlocks.length == 0 && currBasicBlock.isEmpty()
	}
}


function namedContinuation (context, cname, valueName) {
	var self = basicBlock(context),
		renderWithContinuation = self.renderWithContinuation;

	self.renderWithContinuation = function (c, v) {
		return gen.fndecl(
			renderWithContinuation(c, v), [valueName], cname
		);
	}

	return self;
}


// Generator Basic Block:
// A sequence of yields and statements with a single exit continuation.
function basicBlock (context, name, opts) {
	var stmts = [],
		yields = [];

	return {
		// Evaluate yields in sequence, then call the passed continuation
		// with the specified value expression
		renderWithContinuation: (c, v) => {
			var r = c.type == 'BlockStatement' ? c : gen.call(c, v ? [v] : []);

			// Anything else to do before we call?
			if ( stmts.length ) {
				if ( r.type == 'CallExpression' ) {
					r = gen.block([ gen.ret(r) ])
				}

				r.body = stmts.concat(r.body);
			}

			r = yields.reduceRight(
				(s, y) => gen.block( y.stmts.concat([

					gen.ret(gen.call(YIELD, [
						y.expr, gen.arrow([y.e, y.t], s)
					]))
				]) ),
				
				r
			)

			return r.type == 'CallExpression' ? gen.block([gen.ret(r)]) : r;
		},

		yield: (expr) => {
			var e = 'e', //context.temp(),
				t = context.temp();

			yields.push({
				e: e, t: t,
				expr: expr,
				stmts: stmts
			});
			stmts = [];
			cc = null;
			return gen.ident(t);
		},

		stmt: stmt => {
			stmts.push(stmt)
		},

		isEmpty: () => stmts.length + yields.length == 0
	}
}




var hasYieldsTraverser = traverser({
	exprHasYields: function (expr) {
		var context = this.context();
		this.expr(expr, context);
		return context.hasYields;
	},

	stmtHasYields: function (stmt) {
		var context = this.context();
		this.stmt(stmt, context);
		return context.hasYields;
	},

	yieldExpr: function (e, context) {
		context.hasYields = true;
		return this.super.yieldExpr(e, context);
	},

	generator: function (g) {
		// We stop here: yields are local
		return g;
	}
});
function exprHasYields(expr) {
	return hasYieldsTraverser.exprHasYields(expr);
}
function stmtHasYields(stmt) {
	return hasYieldsTraverser.stmtHasYields(stmt);
}

function genYield(expr) {
	return {
		type: 'YieldExpression',
		argument: expr
	}
}
function genGenerator(stmts) {
	return gen.call({
		type: 'FunctionExpression',
		params: [],
        defaults: [],
		body: gen.block( stmts ),
		generator: true
	})
}
function genGeneratorExpr(expr, context) {
	var r = gen.closure([ gen.ret(expr) ]);
	r.calleeFn.generator = true;
	r.calleeFn.internalGenerator = context.generator;
	return r;
}


var YIELD = '__yield';

function dbg(v) {
	try {
		return require("escodegen").generate(v);
	} catch (e) {
		return v;
	}
}
