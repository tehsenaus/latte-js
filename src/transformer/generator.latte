// # ES6 Generators

var traverser = require("../traverser"),
	gen = require("../gen");

var generatorTransformer = module.exports = traverser.explicit('generator', {
	traverse: function (ast) {
		ast = this.super.traverse(ast);
		if ( ast.hasGenerators ) {
			ast['requires iterator-value prelude'] = true;
			ast['requires generator prelude'] = true;
		}
		return ast;
	},

	yieldExpr: function (expr, context) {
		if (!context.generator) {
			throw new Error('Unexpected yield: not in generator!');
		}

		return this._yield(expr.argument, context);
	},

	_yield: function (expr, context) {
		var oldIsInYield = context.isInYield;
		context.isInYield = true

		var bound = context.generator.yield(this.expr(expr, context));

		context.isInYield = oldIsInYield;
		return bound;
	},


	returnStmt: function (stmt, context) {
		stmt = this.super.returnStmt(stmt, context);

		if ( context.topLevelGenerator && !stmt.generatoric ) {
			stmt.argument = gen.call(STOP,
				stmt.argument ? [ GENERATOR_INSTANCE, stmt.argument ]
					: [ GENERATOR_INSTANCE ]
			);
		}

		return stmt;
	},

	varDecl: function (stmt, context) {
		if ( stmt.declarations.length > 1 && stmtHasYields(stmt) ) {
			
			// Multiple variable decl with yields - 
			// must split this up into separate stmts otherwise we may
			// get undefined references

			stmt = gen.block([
				gen.varDecl(d.id, d.init, stmt)
				for (d of stmt.declarations)
			])
			return this.stmt(stmt, context);
		}

		return this.super.varDecl(stmt, context);
	},
	
	ifStmt: function (stmt, context) {
		var aHasYields = stmtHasYields(stmt.consequent)
			bHasYields = stmt.alternate && stmtHasYields(stmt.alternate);

		if ( aHasYields || bHasYields || exprHasYields(stmt.test) ) {

			stmt.test = this.expr(stmt.test, context);

			// There are yields in our branches. Save the current
			// continuation, and call it with the result of the
			// branch we take.

			context.generator.withcc((cc) => {

				return gen.ifStmt(
					stmt.test, [
						this.stmt(stmt.consequent, context),
						cc( gen.ident('null') )
					], [
						stmt.alternate ? this.stmt(stmt.alternate, context) : gen.empty,
						cc( gen.ident('null') )
					]
				);

			}, 'if');

			return gen.empty;
		}

		// Doesn't contain yields, but may contain other generators
		var oldGenerator = context.generator;
		context.generator = null;
		
		stmt = this.super.ifStmt(stmt, context);
		
		context.generator = oldGenerator;

		return stmt;
	},

	forInOfStmt: function (stmt, context) {

		if ( exprHasYields(stmt.right) ) {
			stmt.right = this.expr(stmt.right, context);
		}

		if ( stmtHasYields(stmt.body) ) {

			// Convert to for loop
			context.ast['requires for-in-converter prelude'] = true;

			var keys = context.temp('keys'),
				idx = context.temp('i');

			stmt.left.declarations[0].init = gen.member(keys, gen.ident(idx), { computed: true });

			stmt = gen.block([
				gen.varDecl(
					keys, /*=*/ gen.call('__convertForIn', [stmt.right])
				),
				gen.varDecl(
					idx, gen.val(0)
				),
				gen.whileStmt(
					gen.binary(idx, '<', gen.member(keys, 'length')),
					gen.block([
						stmt.left,
						stmt.body,
						gen.exprStmt(gen.assign(
							idx, /*=*/ gen.binary(idx, '+', gen.val(1))
						))
					])
				)
			]);

			stmt.body[2].update = stmt.body[2].body.body[2];

			this.stmt(stmt, context);
			return gen.empty;
		}

		// Doesn't contain yields, but may contain other generators
		var oldGenerator = context.generator;
		context.generator = null;
		
		stmt = this.super.forInOfStmt(stmt, context);
		
		context.generator = oldGenerator;

		return stmt;
	},

	forStmt: function (stmt, context) {
		if ( stmtHasYields(stmt.body)
			|| stmtHasYields(stmt.update)
			|| stmtHasYields(stmt.test)
		) {

			// Convert to a while statement, and process that

			stmt = gen.block([
				stmt.init,
				gen.whileStmt(stmt.test, gen.block([
					stmt.body,
					gen.exprStmt(stmt.update)
				]))
			])

			stmt.body[1].update = stmt.body[1].body.body[1];
			
			return this.stmt(stmt, context);
		}

		// Doesn't contain yields, but may contain other generators
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.forStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},

	whileDoWhileStmt: function (stmt, context) {
		if ( context.generator && (
			stmtHasYields(stmt.body)
			|| exprHasYields(stmt.test)
		) ) {

			// Convert do-while to while
			if ( stmt.type == 'DoWhileStatement' ) {
				stmt.type = 'WhileStatement';
				stmt = gen.block(
					gen.block(stmt.body).body.concat([ stmt ])
				)
				return this.stmt(stmt, context);
			}


			// Body contains yields. Convert to a recursive
			// closure. Continuation is called if the test
			// evaluates to false.
			
			var rec = context.temp('loop');


			// In loop body, replace 'continue' with calls to
			// recursive closure, and 'break' with flag

			var continueStmt = gen.block([
				stmt.update || gen.empty,
				genRet(gen.callWithThis(rec))
			]);

			stmt.body = replaceContinuesInStmt(stmt.body, continueStmt);

			if ( stmtHasBreak(stmt.body) ) {
				var flag = context.temp('flag');
				stmt.test = gen.binary(flag, '&&', stmt.test);
				
				this.stmt(gen.varDecl(flag, gen.val(true)), context);

				stmt.body = replaceBreaksInStmt(stmt.body, gen.block([
					gen.exprStmt(gen.assign(flag, gen.val(false))),
					continueStmt
				]));
			}


			context.generator.withcc(callcc => {

				this.stmt( gen.ifStmt(
					stmt.test,
					gen.block(stmt.body).body.concat([
						genRet( gen.callWithThis(rec) )
					])
				), context );

				return gen.block([
					genRet( gen.callWithThis(rec) ),
					gen.fndecl([
						callcc(gen.ident(null))
					], [], rec)
				]);
			}, 'loop')

			return gen.empty;
		}

		// Doesn't contain yields, but may contain other generators
		var oldGenerator = context.generator;
		context.generator = null;
		
		stmt = this.super.whileDoWhileStmt(stmt, context);
		
		context.generator = oldGenerator;

		return stmt;
	},

	switchStmt: function (stmt, context) {
		if ( stmtHasYields(stmt) ) {
			throw new Error('Yields not supported in switch statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.switchStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},
	tryStmt: function (stmt, context) {
		if ( stmtHasYields(stmt) ) {
			throw new Error('Yields not supported in try statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var old = context.generator;
		context.generator = null;
		
		stmt = this.super.tryStmt(stmt, context);
		
		context.generator = old;

		return stmt;
	},

	func: function (stmt, context) {
		// Inner functions have new context
		var oldGenerator = context.generator,
			oldTopLevelGenerator = context.topLevelGenerator;
		context.generator = context.topLevelGenerator = null;

		stmt = this.super.func(stmt, context);
		
		context.generator = oldGenerator;
		context.topLevelGenerator = oldTopLevelGenerator;
			
		return stmt;
	},

	binary: function (expr, context) {
		// Support short circuit evaluation
		if ( !context.isInYield && expr.type === 'LogicalExpression') {
			var bHasYields = exprHasYields(expr.right);

			if ( bHasYields ) {
				
				var test = gen.ident(context.temp());
				this.stmt( gen.varDecl(test, expr.left), context );

				return context.generator.withcc((cc) => {

					return gen.ifStmt(
						expr.operator == '||' ? gen.not(test) : test, [
							cc( this.expr(expr.right, context) )
						], [
							cc( test )
						]
					);

				});

			}
		}

		return this.super.binary(expr, context);
	},

	conditional: function (expr, context) {
		if ( !context.isInYield ) {
			var aHasYields = exprHasYields(expr.consequent)
				bHasYields = exprHasYields(expr.alternate);

			if ( aHasYields || bHasYields ) {

				// There are yields in our branches. Save the current
				// continuation, and call it with the result of the
				// branch we take.

				return context.generator.withcc((cc) => {

					return gen.ifStmt(
						expr.test, [
							cc( this.expr(expr.consequent, context) )
						], [
							cc( this.expr(expr.alternate, context) )
						]
					);

				});

				
			}
		}

		return this.super.conditional(expr, context);
	},

	stmt: function (stmt, context) {

		if ( stmt.type == 'ExpressionStatement' ) {

			// OPTIMISATION:
			// Yield statement - not using value, so avoid adding
			// useless expressionstmt
			if ( stmt.expression.type == 'YieldExpression' ) {
				this.super.stmt(stmt, context);
				return gen.empty;
			}
		}

		stmt = this.super.stmt(stmt, context);

		if ( context.generator ) {
			if ( stmt.type != 'BlockStatement' ) {
				context.generator.stmt(stmt);
				stmt = gen.empty;
			}
		}

		return stmt;
	},



	withGenerator: function (m, context, fn) {
		var lastGenerator = context.generator;

		var currBlock = generatorBlock(context);

		var generator = context.generator = context.topLevelGenerator = {

			// signals that any stements or expressions following this node needs to be
			// extracted as a named continuation (i.e. if there are branches
			// which need to merge).
			//
			// The value of the current expression - ccv - (if applicable)
			// is passed to the continuation.
			withcc: (fn, name, opts) => {
				opts = opts || {};

				var cc = opts.cc || context.temp('cc' + (name ? '_'+name : '')),
					ccv = context.temp('cv' + (name ? '_'+name : ''));

				var prevBlock = currBlock;
				currBlock = generatorBlock(context);

				stmt = fn((v) => {
					// End of a branch, call CC with value
					var callCC = currBlock.renderWithContinuation(cc, v);

					// Start a new block, with the same exit point (branch merge)
					currBlock = generatorBlock(context);

					return callCC;
				});

				if ( !currBlock.isEmpty() ) {
					throw "Continuation hasn't been called!";
				}

				currBlock = prevBlock;
				currBlock.stmt(stmt);

				// After a flow branch, any future statements must be part of the
				// named continuation.
				// Start entering all following statements into the continuation
				currBlock.beginNamedContinuation(cc, ccv);

				// stmt.leadingComments = [gen.comment('@' + depth + ' withcc: '+cc)]
		
				return gen.ident(ccv);
			},

			yield: v => currBlock.yield(v),
			stmt: stmt => currBlock.stmt(stmt)
		}

		// Traverse
		m = fn();

		context.generator = lastGenerator;
		context.ast.hasGenerators = true;
		
		return gen.block( currBlock.renderWithContinuation(STOP_GENERATOR) );
	},

	generator: function (m, context) {

		var body = this.withGenerator(m, context, () => {
			// Traverse to get all yields
			return this.super.generator(m, context);
		})

		m.body.body = [ genRet(
			gen.newExpr('__Generator', [ gen.ident('this'), gen.fn([
				body.type.indexOf('Expression') > 0 ? genRet(body) : body
			], [GENERATOR_INSTANCE]) ]) 
		)];

		m.generator = false;
		return m;
	}
})





// Continuation Support
// --------------------


// ### Generator Block
// A block containing internal control flow supported by
// named continuations.
function generatorBlock (context) {
	// Generator blocks start off as a basic block.
	var currBasicBlock = basicBlock(context),

		// The top-level basic block is rendered to a placeholder list.
		renderedBlocks = [],
		renderSite = renderedBlocks;

	return {
		// Statements and yields are generated in the current block.
		stmt: s => currBasicBlock.stmt(s),
		yield: v => currBasicBlock.yield(v),

		beginNamedContinuation: function (cname, valueName) {
			// When a continuation is started, the previous block must end.

			// A 'render site' for the continuation is created at the end of the
			// previous block - thus the scope of the previous block will
			// be accessible in the continuation.

			var cDeclSite = gen.block([]);
			currBasicBlock.stmt(cDeclSite);

			// The code for the previous block is rendered at its render site.
			renderSite.push( currBasicBlock.renderWithContinuation(cname) );
			renderSite = cDeclSite.body;

			// The continuation then becomes the current block. From here on in,
			// statements will go here.
			currBasicBlock = namedContinuation(context, cname, valueName);
			return currBasicBlock;
		},

		renderWithContinuation: function (cname, value) {
			renderSite[0] = currBasicBlock.renderWithContinuation(cname, value);
			return gen.block( renderedBlocks );
		},

		isEmpty: () => renderedBlocks.length == 0 && currBasicBlock.isEmpty()
	}
}


// ### Generator Named Continuation
// A named continuation is basically a basic block, wrapped up in a
// function declaration.
function namedContinuation (context, cname, valueName) {
	var self = basicBlock(context),
		renderWithContinuation = self.renderWithContinuation;

	self.renderWithContinuation = function (c, v) {
		return gen.fndecl(
			renderWithContinuation(c, v), [valueName], cname
		);
	}

	return self;
}


// ### Generator Basic Block
// A linear sequence of yields and statements, with a single exit continuation.
function basicBlock (context, name, opts) {
	var stmts = [],
		yields = [];

	return {
		// Generates code to evaluate yields in sequence, then call the passed continuation
		// with the specified value expression, which should be a valid expression
		// at the point all yields have returned.

		renderWithContinuation: (c, v) => {
			var r = c.type == 'BlockStatement' ? c : gen.call(c, v ? [v] : []);

			// Any trailing statements are executed before calling the continuation.
			if ( stmts.length ) {
				if ( r === STOP_GENERATOR ) {
					r = gen.block([ r ]);
				} else if ( r.type == 'CallExpression' ) {
					r = gen.block([ genRet(r) ])
				}

				r.body = stmts.concat(r.body);
			}

			// Yields are transformed into a nested callback structure. Any non-yielding
			// statements are interleaved into the correct place.
			r = yields.reduceRight(
				(s, y) => gen.block( y.stmts.concat([

					genRet(gen.call(YIELD,
						// Optimisation:
						// If continuation is just a STOP, don't create a needless closure
						( s === STOP_GENERATOR
							? [ GENERATOR_INSTANCE, y.expr ]
							: [
								GENERATOR_INSTANCE, y.expr, gen.arrow([y.e, y.t], s)
							]
						)
					))
				]) ),
				
				r
			)

			return r.type == 'CallExpression' ? gen.block([genRet(r)]) : r;
		},

		yield: (expr) => {
			var e = 'e', //context.temp(),
				t = context.temp();

			yields.push({
				e: e, t: t,
				expr: expr,
				stmts: stmts
			});
			stmts = [];
			cc = null;
			return gen.ident(t);
		},

		stmt: stmt => {
			stmts.push(stmt)
		},

		isEmpty: () => stmts.length + yields.length == 0
	}
}




// Traverser Support
// -----------------

var hasYieldsTraverser = traverser({
	exprHasYields: function (expr) {
		var context = this.context();
		this.expr(expr, context);
		return context.hasYields;
	},

	stmtHasYields: function (stmt) {
		var context = this.context();
		this.stmt(stmt, context);
		return context.hasYields;
	},

	yieldExpr: function (e, context) {
		context.hasYields = true;
		return this.super.yieldExpr(e, context);
	},

	generator: function (g) {
		// We stop here: yields are local
		return g;
	}
});
function exprHasYields(expr) {
	return hasYieldsTraverser.exprHasYields(expr);
}
function stmtHasYields(stmt) {
	return hasYieldsTraverser.stmtHasYields(stmt);
}

function genYield(expr) {
	return {
		type: 'YieldExpression',
		argument: expr
	}
}
function genGenerator(stmts) {
	return gen.call({
		type: 'FunctionExpression',
		params: [],
        defaults: [],
		body: gen.block( stmts ),
		generator: true
	})
}
function genGeneratorExpr(expr, context) {
	var r = gen.closure([ genRet(expr) ]);
	r.calleeFn.generator = true;
	r.calleeFn.internalGenerator = context.generator;
	return r;
}


var hasBreakTraverser = createBreakContinueTraverser(['BreakStatement'])

function stmtHasBreak(stmt) {
	return hasBreakTraverser.stmtHasBreakContinue(stmt);
}
function replaceBreaksInStmt(stmt, replacement) {
	var tr = createBreakContinueTraverser(['BreakStatement']);
	tr.breakContinue = () => replacement;
	return tr.stmt(stmt, tr.context());
}
function replaceContinuesInStmt(stmt, replacement) {
	var tr = createBreakContinueTraverser(['ContinueStatement']);
	tr.breakContinue = () => replacement;
	return tr.stmt(stmt, tr.context());
}

function createBreakContinueTraverser(types) {
	return traverser({

		stmtHasBreakContinue: function (stmt) {
			var context = this.context();
			context.hasBreakContinue = false;
			this.stmt(stmt, context);
			return context.hasBreakContinue;
		},

		stmt: function (stmt, context) {
			if ( types.indexOf(stmt.type) >= 0 ) {
				stmt = this.breakContinue(stmt, context);
			}
			return this.super.stmt(stmt, context);
		},

		breakContinue: function (stmt, context) {
			context.hasBreakContinue = true;
			return stmt;
		},

		// Stop points
		forStmt: x => x,
		forInStmt: x => x,
		whileDoWhileStmt: x => x,
		func: x => x
	});
}

function genRet() {
	var stmt = gen.ret.apply(gen, arguments);
	stmt.generatoric = true; // Stops the return stmt being transformed
	return stmt;
}


var YIELD = '__generatorYield',
	STOP = '__generatorStop',
	GENERATOR_INSTANCE = '__generator',
	STOP_GENERATOR = gen.block([
		genRet( gen.call(STOP, [GENERATOR_INSTANCE]) )
	]);

function dbg(v) {
	try {
		return require("escodegen").generate(v);
	} catch (e) {
		return v;
	}
}
