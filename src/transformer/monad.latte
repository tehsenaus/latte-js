
var traverser = require("../traverser"),
	gen = require("../gen"),
	dbg = require("../util/dbgPrint");

var monadTransformer = module.exports = traverser.explicit('monad', {
	_bind: function (expr, context) {
		context.stmt.hasBinds = true;
		
		var oldIsInBind = context.isInBind;
		context.isInBind = true

		var bound = context.monad.bind(this.expr(expr, context));

		context.isInBind = oldIsInBind;
		return bound;
	},

	traverse: function (ast) {
		ast = this.super.traverse(ast);
		if ( ast.hasMonads ) {
			ast['requires monad-bind prelude'] = true;
		}
		return ast;
	},

	varDecl: function (stmt, context) {
		if ( stmt.declarations.length > 1 && stmtHasBinds(stmt) ) {
			
			// Multiple variable decl with binds - 
			// must split this up into separate stmts otherwise we may
			// get undefined references

			stmt = gen.block([
				gen.varDecl(d.id, d.init, stmt)
				for (d of stmt.declarations)
			])
			return this.stmt(stmt, context);
		}

		return this.super.varDecl(stmt, context);
	},

	ifStmt: function (stmt, context) {
		var aHasBinds = stmtHasBinds(stmt.consequent)
			bHasBinds = stmt.alternate && stmtHasBinds(stmt.alternate);

		if ( aHasBinds || bHasBinds ) {

			// If statement contains binds. Turn this into a conditional expression
			// with monads on either side.
			
			var c = { type: 'ExpressionStatement', expression: genBind( gen.conditional(
				stmt.test,
				genMonad(stmt.consequent),
				stmt.alternate ? genMonad(stmt.alternate) : gen.val(true)
			) ) };

			c = this.stmt(c, context);

			return c;
		}

		// Doesn't contain binds, but may contain other monads
		// Test may still have binds, so process that first
		stmt.test = this.expr(stmt.test, context);

		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.ifStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	forInStmt: function (stmt, context) {

		if ( !stmt.monadic && stmtHasBinds(stmt.body) ) {

			// Body contains binds. Convert to a chain of 
			// binds on a new monad block representing the body.
			
			var stmts = [];

			if ( stmtHasBreak(stmt.body) ) {
				var flag = context.temp('done');
				stmts.push( gen.varDecl(flag) );
				stmt.body = replaceBreaksWithFlagInStmt(stmt.body, flag, gen.val(true));

				stmt.body = gen.block([
					gen.ifStmt(gen.ident(flag), gen.ret()),
					stmt.body
				]);
			}

			stmt.body = replaceContinuesWithReturnInStmt(stmt.body);


			var loopBodyMonad = genMonad(stmt.body);
			var bodyClosure = gen.arrow([], loopBodyMonad);
			var chain = gen.ident( context.temp('monad') );

			stmt.left.kind = 'let';
			stmt.body = gen.assignStmt(
				chain, gen.call(MONAD_BIND, [ chain, bodyClosure ])
			)
			stmt.monadic = true;

			return gen.block(this.stmts(stmts.concat([
				gen.varDecl(chain, null),
				stmt,
				gen.exprStmt( genBind(chain) )
			]), context));
		}

		// Doesn't contain binds, but may contain other monads
		stmt.right = this.expr(stmt.right, context);

		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.forInStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	forStmt: function (stmt, context) {
		if ( !stmt.monadic && (
			stmtHasBinds(stmt.body)
			|| exprHasBinds(stmt.update)
			|| exprHasBinds(stmt.test)
		) ) {

			// Convert to a while statement, and process that

			stmt = gen.block([
				stmt.init,
				gen.whileStmt(stmt.test, gen.block([
					stmt.body,
					gen.exprStmt(stmt.update)
				]))
			])
			
			return this.stmt(stmt, context);
		}

		// Doesn't contain binds, but may contain other monads
		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.whileDoWhileStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	whileDoWhileStmt: function (stmt, context) {
		if ( !stmt.monadic && (
			stmtHasBinds(stmt.body)
			|| stmtHasBinds(stmt.test)
		) ) {

			// Body contains binds. Convert to a recursive
			// closure

			var stmts = [];

			if ( stmtHasBreak(stmt.body) ) {
				var flag = context.temp('looping');
				stmts.push( gen.varDecl(flag, gen.val(true)) );
				stmt.test = gen.and(flag, stmt.test);
				stmt.body = replaceBreaksWithFlagInStmt(stmt.body, flag);
			}

			stmt.body = replaceContinuesWithReturnInStmt(stmt.body);
			
			var monad = genMonad(stmt.body);
			var rec = context.temp('loop');

			stmt = gen.closure([
				// Do test, if pass, evaluate body and recurse
				gen.ret(genMonadExpr( gen.conditional(
					stmt.test,
					gen.call(MONAD_BIND, [monad, rec]),
					gen.ident('null')
				) ))
			], [], rec)
			stmt.monadic = true;

			return gen.block(this.stmts(stmts.concat([
				gen.exprStmt( genBind(stmt) )
			]), context));
		}

		// Doesn't contain binds, but may contain other monads
		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.whileDoWhileStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	switchStmt: function (stmt, context) {
		if ( !stmt.monadic && (stmtHasBinds(stmt) || exprHasBinds(stmt.discriminant)) ) {
			throw new Error('Monadic binds not supported in switch statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.switchStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},
	tryStmt: function (stmt, context) {
		if ( !stmt.monadic && stmtHasBinds(stmt) ) {
			throw new Error('Monadic binds not supported in try statement... yet!');
		}

		// Doesn't contain binds, but may contain other monads
		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.tryStmt(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	func: function (stmt, context) {
		// Inner functions have new context
		var oldMonad = context.monad;
		context.monad = null;
		
		stmt = this.super.func(stmt, context);
		
		context.monad = oldMonad;

		return stmt;
	},

	unary: function (expr, context) {
		if ( expr.operator === "<<" ) {
			if (!context.monad) {
				throw new Error('Unexpected "<<": not in monad block!\nIn:' + dbg(expr));
			}

			return this._bind(expr.argument, context);
		}
		return this.super.unary(expr, context);
	},

	binary: function (expr, context) {
		// Support short circuit evaluation
		if ( !context.isInBind && expr.type === 'LogicalExpression') {
			var bHasBinds = exprHasBinds(expr.right);

			if ( bHasBinds ) {
				expr.right = genMonadExpr(expr.right);
				return this.expr(genBind(expr), context)
			}
		}

		return this.super.binary(expr, context);
	},

	conditional: function (expr, context) {
		if ( !context.isInBind ) {
			var aHasBinds = exprHasBinds(expr.consequent)
				bHasBinds = exprHasBinds(expr.alternate);

			if ( aHasBinds || bHasBinds ) {

				if ( aHasBinds ) expr.consequent = genMonadExpr(expr.consequent);
				if ( bHasBinds ) expr.alternate = genMonadExpr(expr.alternate);

				return this.expr(genBind(expr), context)
			}
		}

		return this.super.conditional(expr, context);
	},

	stmt: function (stmt, context) {
		var oldStmt = context.stmt;
		context.stmt = {};

		stmt = this.super.stmt(stmt, context);

		if ( context.monad ) {
			/*if ( context.stmt.hasBinds ) {

			} else*/ if ( stmt.type != 'BlockStatement' ) {
				context.monad.stmt(stmt);
				stmt = {
		            "type": "EmptyStatement"
		        };
			}
		}

		context.stmt = oldStmt;
		return stmt;
	},

	monad: function (m, context) {
		var lastMonad = context.monad;
		var binds = [], stmts = [];
		var monad = context.monad = {
			bind: (expr) => {
				var t = context.temp();
				binds.push({
					t: t,
					expr: expr,
					stmts: stmts
				});
				stmts = [];
				return gen.ident(t);
			},
			stmt: stmt => stmts.push(stmt)
		}


		// Traverse to get all binds
		m = this.super.monad(m, context);

		// Work backwards to produce the tree of binds
		var body = binds.reduceRight(
			(s, b) => (gen.block(b.stmts.concat([
				gen.ret( gen.call(MONAD_BIND, [
					b.expr, gen.arrow([b.t], s)
				]) )
			]))),
			
			gen.block((m.body.body || []).concat(stmts))
		)

		context.monad = lastMonad;
		context.ast.hasMonads = true;

		return gen.closure([
			body.type.indexOf('Expression') > 0 ? gen.ret(body) : body
		])
	}
})


var hasBindsTraverser = traverser({
	exprHasBinds: function (expr) {
		var context = this.context();
		this.expr(expr, context);
		return context.hasBinds;
	},

	stmtHasBinds: function (stmt) {
		var context = this.context();
		this.stmt(stmt, context);
		return context.hasBinds;
	},

	unary: function (expr, context) {
		if ( expr.operator === "<<" ) {
			context.hasBinds = true;
		}
		return this.super.unary(expr, context);
	},

	monad: function (m) {
		// We stop here: binds are local
		return m;
	}
});
function exprHasBinds(expr) {
	return hasBindsTraverser.exprHasBinds(expr);
}
function stmtHasBinds(stmt) {
	return hasBindsTraverser.stmtHasBinds(stmt);
}

function genBind(expr) {
	return {
		type: 'UnaryExpression', operator: '<<',
		argument: expr
	}
}
function genMonad(stmts) {
	return {
		type: 'MonadExpression',
		body: gen.block( stmts )
	}
}
function genMonadExpr(expr) {
	return genMonad(gen.ret(expr));
}




var hasBreakTraverser = createBreakContinueTraverser(['BreakStatement'])

function stmtHasBreak(stmt) {
	return hasBreakTraverser.stmtHasBreakContinue(stmt);
}
function replaceBreaksWithFlagInStmt(stmt, flag, val) {
	var tr = createBreakContinueTraverser(['BreakStatement']);
	tr.breakContinue = () => {
		return gen.ret( gen.assign(flag, val || gen.val(false)) );
	}
	return tr.stmt(stmt, tr.context());
}
function replaceContinuesWithReturnInStmt(stmt) {
	var tr = createBreakContinueTraverser(['ContinueStatement']);
	tr.breakContinue = () => {
		return { type: 'ReturnStatement' }
	}
	return tr.stmt(stmt, tr.context());
}

function createBreakContinueTraverser(types) {
	return traverser({

		stmtHasBreakContinue: function (stmt) {
			var context = this.context();
			context.hasBreakContinue = false;
			this.stmt(stmt, context);
			return context.hasBreakContinue;
		},

		stmt: function (stmt, context) {
			if ( types.indexOf(stmt.type) >= 0 ) {
				stmt = this.breakContinue(stmt, context);
			}
			return this.super.stmt(stmt, context);
		},

		breakContinue: function (stmt, context) {
			context.hasBreakContinue = true;
			return stmt;
		},

		// Stop points
		forStmt: x => x,
		forInStmt: x => x,
		whileDoWhileStmt: x => x,
		func: x => x,
		monad: x => x
	});
}


var MONAD_BIND = '__when';