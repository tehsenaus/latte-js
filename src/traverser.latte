
var flatten = Array.apply.bind([].concat, []),
	util = require("util");

function traverser(args) {
	var me = {};

	me.context = () => {
		return {
			scopes: [],
			blocks: [],
			stmts: [],

			enterScope: function (node) {
				var scope = this.enterBlock(node.body, node);
				
				scope.ctemp = () => this.ast.ctemp;
				scope.temp = n => "__t" + this.ast.ctemp++ + (n ? '_'+n : '');

				this.scopes.unshift(scope);
				return scope;
			},
			exitScope: function () {
				this.scopes.shift();
				this.exitBlock();
			},
			scope: function (node, fn) {
				this.enterScope(node);
				try { return fn(this); }
				finally { this.exitScope(); };
			},

			enterBlock: function (block, node) {
				var block = {
					block: block,
					node: node
				}
				this.blocks.unshift(block);
				return block;
			},
			exitBlock: function () {
				this.blocks.shift();
			},
			
			block: function (block, node, fn) {
				this.enterBlock(block, node);
				try { return fn(this); }
				finally { this.exitBlock(); };
			},

			isBlockScope: function () {
				return this.scopes[0] === this.blocks[0];
			},

			// Allocate a temp in the nearest scope
			temp: function (n) {
				return this.scopes[0].temp(n);
			}
		}
	}

	me.traverse = (ast) => {
		var context = me.context();
		context.ast = ast;
		ast.ctemp = ast.ctemp || 0;
		return context.scope(ast, context => {
			ast.body = me.stmts(ast.body, context);
			return ast;
		});
	}

	me.stmts = (stmts, context) => {
		return flatten(stmts.map(stmt => me.stmt(stmt, context)));
	}
	me.blockStmts = (stmts, context) => {
		return flatten(stmts.map(stmt => me.blockStmt(stmt, context)));
	}

	me.stmt = (stmt, context) => {
		if (!stmt) return stmt;
		context.stmts.unshift(stmt);
		try {
			switch (stmt.type) {
				case 'BlockStatement':
					return me.block(stmt, context);

				case 'VariableDeclaration':
					return me.varDecl(stmt, context);

				case 'FunctionDeclaration':
					return me.funcDecl(stmt, context);

				case 'ExpressionStatement':
			        stmt.expression = me.expr(stmt.expression, context);
			        return stmt;

			    case 'IfStatement': 
			    	return me.ifStmt(stmt, context)

			    case 'ForStatement': 
			    	return me.forStmt(stmt, context)
			    case 'ForInStatement':
			    	return me.forInStmt(stmt, context)
			    case 'ForOfStatement':
			    	return me.forOfStmt(stmt, context)

			    case 'WhileStatement':
			    case 'DoWhileStatement':
			    	return me.whileDoWhileStmt(stmt, context)

			    case 'SwitchStatement':
			    	return me.switchStmt(stmt, context)

			    case 'ReturnStatement':
			    case 'ThrowStatement':
			    	return {
			    		type: stmt.type,
			    		argument: me.expr(stmt.argument, context)
			    	}

			    case 'TryStatement':
			    	return me.tryStmt(stmt, context)

			    case 'BreakStatement':
			    case 'ContinueStatement':
			    case 'EmptyStatement':
			    	break;

			    case undefined:
			    	throw new Error("Fatal: Stmt type is undefined! In: " + util.inspect(stmt));

				default:
					if ( stmt.type.indexOf('Expression') > 0 ) {
						// XXX: be permissive about expressions where stmts are expected
						return me.expr(stmt, context)
					}
					console.log("Unhandled stmt: ", stmt.type);
			}
			return stmt;
		} finally {
			context.stmts.shift();
		}
	};
	me.blockStmt = (stmt, context) => me.stmt(stmt, context);

	me.block = (stmt, context) => {
		return context.block(stmt, context.stmts[1], context => {
			stmt.body = me.blockStmts(stmt.body, context);
			return stmt;
		});
	}

	me.ifStmt = (stmt, context) => {
		return {
    		type: 'IfStatement',
    		test: stmt.test && me.expr(stmt.test, context),
    		consequent: me.stmt(stmt.consequent, context),
    		alternate: stmt.alternate && me.stmt(stmt.alternate, context),
    		leadingComments: stmt.leadingComments
    	}
	}

	me.forStmt = (stmt, context) => {
		return {
    		type: 'ForStatement',
    		init: stmt.init && me.stmt(stmt.init, context),
    		test: stmt.test && me.expr(stmt.test, context),
    		update: stmt.update && me.expr(stmt.update, context),
    		body: me.stmt(stmt.body, context),
    		leadingComments: stmt.leadingComments
    	}
	}
	
	me._forInOfStmt = (stmt, context) => {
		//stmt.right = me.expr(stmt.right, context)
		stmt.body = me.stmt(stmt.body, context)
		return stmt;
	}
	me.forInStmt = (stmt, context) => {
		return me._forInOfStmt(stmt, context)
	}
	me.forOfStmt = (stmt, context) => {
		return me._forInOfStmt(stmt, context)
	}
	me.forInOfStmt = (stmt, context) => {
		switch (stmt.type) {
			case 'ForInStatement':
		    	return me.forInStmt(stmt, context)
		    case 'ForOfStatement':
		    	return me.forOfStmt(stmt, context)
		}
	}

	me.whileDoWhileStmt = (stmt, context) => {
		stmt.test = me.expr(stmt.test, context)
    	stmt.body = me.stmt(stmt.body, context)
    	return stmt
	}

	me.switchStmt = (stmt, context) => {
		stmt.discriminant = me.expr(stmt.discriminant, context);
    	stmt.cases = stmt.cases.map(c => {
    		c.consequent = me.stmts(c.consequent, context);
    		return c;
    	})
    	return stmt;
	}

	me.tryStmt = (stmt, context) => {
		stmt.block = me.stmt(stmt.block, context);
    	stmt.handlers.forEach(handler => {
    		handler.body = me.stmt(handler.body, context)
    	})
    	stmt.finalizer = stmt.finalizer && me.stmt(stmt.finalizer, context);
    	return stmt;
	}

	me.varDecl = (stmt, context) => {
		stmt.declarations = me.decls(stmt.declarations, context);
		return stmt;
	}
	me.decls = (decls, context) => {
		return flatten(decls.map(d => me.decl(d, context)));
	}
	me.decl = (decl, context) => {
		decl.init = me.expr(decl.init, context);
		return decl;
	}
	me.funcDecl = (fn, context) => {
		return me.func(fn, context);
	}
	me.expr = (expr, context) => {
		if (!expr) return expr;
		switch (expr.type) {
			case 'FunctionExpression':
				return me.funcExpr(expr, context);
			case 'ArrowFunctionExpression':
				return me.arrowFuncExpr(expr, context);
			case 'CallExpression':
				return me.callExpr(expr, context);
			case 'NewExpression':
				return {
					type: expr.type,
					callee: me.expr(expr.callee, context),
					arguments: expr.arguments.map(arg => me.expr(arg, context))
				}
			case 'ObjectExpression':
				return {
					type: 'ObjectExpression',
					properties: expr.properties.map(p => {
						p.value = me.expr(p.value, context);
						return p;
					})
				}
			case 'ArrayExpression':
				expr.elements = expr.elements.map(e => me.expr(e, context))
				return expr;
			case 'ComprehensionExpression':
				return me.comprehension(expr, context);
			case 'MemberExpression':
				expr.object = me.expr(expr.object, context);
				expr.property = me.expr(expr.property, context);
				return expr;
			case 'AssignmentExpression':
		        expr.right = me.expr(expr.right, context);
		        return expr;
		    case 'ConditionalExpression':
		    	return me.conditional(expr, context);
		    case 'BinaryExpression':
		    case 'LogicalExpression':
		    	return me.binary(expr, context);
		    case 'UnaryExpression':
		    case 'UpdateExpression':
		    	return me.unary(expr, context);
		    case 'SequenceExpression':
		    	expr.expressions = expr.expressions.map(x => me.expr(x, context));
		    	return expr;
		    case 'MonadExpression':
		    	return me.monad(expr, context);
		    case 'YieldExpression':
		    	return me.yieldExpr(expr, context);
		    case 'Identifier':
		    	return me.ident(expr, context);
		    case 'ThisExpression':
		    	return me.thisExpr(expr, context);
		    case 'TemplateLiteral':
		    	return me.quasiLiteral(expr, context);
		    case 'Literal':
		    	break;
			default:
				throw new Error("Unhandled expr: " + expr);
		}
		return expr;
	}
	
	me.arrowFuncExpr = (fn, context) => {
		fn.body = fn.body.type == 'BlockStatement'
			? me.stmt(fn.body, context) : me.expr(fn.body, context);
		return fn;
	};

	me.funcExpr = (fn, context) => {
		return me.func(fn, context);
	}

	me.func = (fn, context) => {
		var doIt = context => {
			if ( fn.generator ) {
				return me.generator(fn, context)
			}

			fn.body = me.stmt(fn.body, context);
			return fn;
		}

		return fn.noScope ? doIt(context) : context.scope(fn, doIt);
	}

	me.callExpr = (expr, context) => {
		return {
			type: expr.type,
			callee: me.expr(expr.callee, context),
			arguments: expr.arguments.map(arg => me.expr(arg, context))
		}
	}

	me.comprehension = (c, context) => {
		c.filter = c.filter && me.expr(c.filter, context)
		c.blocks.forEach(b => {
			b.right = me.expr(b.right, context)
		})
		c.body = me.expr(c.body, context)
		return c;
	}

	me.generator = (fn, context) => {
		fn.body.body = me.stmts(fn.body.body, context);
		return fn;
	}

	me.monad = (m, context) => {
		m.body = me.stmt(m.body, context);
		return m;
	}

	me.yieldExpr = (m, context) => {
		m.argument = me.expr(m.argument, context)
		return m;
	}

	me.conditional = (expr, context) => {
		expr.test = me.expr(expr.test, context)
    	expr.consequent = me.expr(expr.consequent, context)
    	expr.alternate = me.expr(expr.alternate, context)
    	return expr;
	}
	me.binary = (expr, context) => {
		expr.left = me.expr(expr.left, context)
    	expr.right = me.expr(expr.right, context)
    	return expr;
	}
	me.unary = (expr, context) => {
		expr.argument = me.expr(expr.argument, context)
		return expr;
	}

	me.ident = x => x;
	me.thisExpr = x => x;

	me.quasiLiteral = x => { throw new Error('Unhandled quasi literal!') };

	me.super = {};

	for ( var n in args ) {
		me.super[n] = me[n];
		me[n] = args[n]
	}

	return me;
}

module.exports = traverser;


var explicitTypes = "func ifStmt forStmt forOfStmt forInStmt whileDoWhileStmt switchStmt tryStmt";
traverser.explicit = function (name, args, exceptions) {
	var t = traverser(args);

	exceptions = exceptions || [];
	if ( 'forInOfStmt' in args ) exceptions = exceptions.concat(['forOfStmt', 'forInStmt']);

	explicitTypes.split(' ').forEach(x => {
		if ( exceptions.indexOf(x) >= 0 || (x in args) ) return;

		t[x] = () => {
			throw new Error('Unhandled ' + x + ' in ' + name + '!');
		}
	});

	return t;
}
